SENTIMENT ANALYSIS
- import dataset (pandas)
- aggiungi colonna rating sulla base di stars (pos, neg, neutral)
- classi sbilanciate, prendi lo stesso numero di recensioni
- rimozione  stop words non indicata per sentiment analysis
- tokenizzazione (gensim)
- lemmatizzazione (gensim)
- stemming (gensim)
- splitting train/test (70-30) (scikitlearn) con shuffling
- training word2vec (gensim) usando stemmed tokens (lo si salva in modo da non dover fare training ogni volta)
	oppure uso pre-trained word-embeddings
	oppure uso BERT (ma + complicato)
- dizionario word2vec associa stringa a vettore
- trasformo recensioni in vettore facendo la media dei vettori delle parole e salvo in csv 
	usa anche tf-idf magari
- faccio classificazione (scikitlearn)
	random forest
	linear SVM
	naive bayes
	rete neurale (pytorch) le RNN danno risultati migliori rispetto alle reti classiche e alle CNN
- faccio testing

RECOMMENDATION SYSTEM
- predice numero di stelle che un dato utente dà ad un dato business sulla base:
	1. di business simili visitati
		- estrai business con almeno una categoria in comune
		- kmeans sulla base di stelle in generale, numero di review 
		- knn su numero di stelle 
	2. delle preferenze di utenti simili
		- estrai utenti che hanno visitato quel business
		- kmeans su review-count, useful, funny, cool, fans, average_stars, compliment vari
		- prendi cluster con utenti simili
		- knn su numero di stelle
- media di stelle è predizione
- testing

DATASET: https://www.kaggle.com/yelp-dataset/yelp-dataset?select=yelp_academic_dataset_review.json
SCHEMA: https://www.yelp.com/dataset/documentation/main
